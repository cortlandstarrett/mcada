-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"d791089f-e6d6-4e8a-a040-7ffe70c0731b",
	"d791089f-e6d6-4e8a-a040-7ffe70c0731b",
	'transform',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("7817fda2-72f1-4860-98e9-b53a4ee2ca93",
	112,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'4.1.17',
	'mcada::transform');
INSERT INTO GD_GE
	VALUES ("cd990d29-e60f-4f04-ac3c-c0580e99b3bc",
	"7817fda2-72f1-4860-98e9-b53a4ee2ca93",
	"80a23363-d27a-46dc-88c9-721ab32e89db",
	12,
	0,
	'mcada::transform::trace');
INSERT INTO GD_SHP
	VALUES ("cd990d29-e60f-4f04-ac3c-c0580e99b3bc");
INSERT INTO GD_NCS
	VALUES ("cd990d29-e60f-4f04-ac3c-c0580e99b3bc");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"cd990d29-e60f-4f04-ac3c-c0580e99b3bc");
INSERT INTO DIM_GE
	VALUES (4279.000000,
	3109.000000,
	"cd990d29-e60f-4f04-ac3c-c0580e99b3bc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd990d29-e60f-4f04-ac3c-c0580e99b3bc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("7817fda2-72f1-4860-98e9-b53a4ee2ca93",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_EE
	VALUES ("80a23363-d27a-46dc-88c9-721ab32e89db",
	'trace',
	'',
	'TRACE',
	"00000000-0000-0000-0000-000000000000",
	'',
	'trace',
	0);
INSERT INTO S_BRG
	VALUES ("fcf13b0e-91fd-41c5-a8ed-96d6c4f690e8",
	"80a23363-d27a-46dc-88c9-721ab32e89db",
	'log',
	'',
	0,
	"ba5eda7a-def5-0000-0000-000000000000",
	's = STRING::itoa( i:param.id ) + " ___ " + param.flavor + " ___ " + param.message;
LOG::LogInfo( message:s );',
	1,
	'',
	0);
INSERT INTO S_BPARM
	VALUES ("2dd05088-6a28-4af7-b955-5f2600711f75",
	"fcf13b0e-91fd-41c5-a8ed-96d6c4f690e8",
	'id',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_BPARM
	VALUES ("1e3b28fe-4097-4c5b-91f5-399f1a063b48",
	"fcf13b0e-91fd-41c5-a8ed-96d6c4f690e8",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2dd05088-6a28-4af7-b955-5f2600711f75",
	'');
INSERT INTO S_BPARM
	VALUES ("5acca0b5-d04b-4253-a3bc-6c8173d9ddad",
	"fcf13b0e-91fd-41c5-a8ed-96d6c4f690e8",
	'message',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1e3b28fe-4097-4c5b-91f5-399f1a063b48",
	'');
INSERT INTO PE_PE
	VALUES ("80a23363-d27a-46dc-88c9-721ab32e89db",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	5);
INSERT INTO S_SYNC
	VALUES ("23554559-8c4c-4530-80f1-f4afc6659ee1",
	"00000000-0000-0000-0000-000000000000",
	'transformApplication',
	'',
	'root_ep_pkg = param.root_ep_pkg;

root_package = root_package::populate( name:"Root_Object" );

// The root package is in a file.
genfile = genfile::populate( name:"Root_Object", extension:"ads" );
relate root_package to genfile across R200;

// transform built-in types
LOG::LogInfo(message:"  Transforming built-in types...");
::transformBuiltinTypes();
LOG::LogInfo(message:"  done.");

// transform components into domain packages
select many c_cs related by root_ep_pkg->PE_PE[R8000]->C_C[R8001];
select many ref_c_cs related by root_ep_pkg->PE_PE[R8000]->CL_IC[R8001]->C_C[R4201];
all_c_cs = c_cs | ref_c_cs;
for each c_c in all_c_cs
  ::component2domain_package( c_c:c_c, root_package:root_package );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("080b6a4a-c644-473a-b5cb-4e6f60ee6505",
	"23554559-8c4c-4530-80f1-f4afc6659ee1",
	'root_ep_pkg',
	"9939c670-a721-4742-a824-ed4b0df4acd6",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("9939c670-a721-4742-a824-ed4b0df4acd6",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Package>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Element Packaging/Element Packaging.xtuml');
INSERT INTO PE_PE
	VALUES ("23554559-8c4c-4530-80f1-f4afc6659ee1",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("044dfd91-f990-49d8-b9d3-f7cab2bd02a4",
	"00000000-0000-0000-0000-000000000000",
	'attribute2field',
	'',
	'o_attr = param.o_attr;
record = param.record;

// attribute becomes field in record
field = field::populate( name:o_attr.Name );
relate field to record across R2;

// link type
select one s_dt related by o_attr->S_DT[R114];
if ( s_dt.Name == "same_as<Base_Attribute>" )
  select one s_dt related by o_attr->O_RATTR[R106]->O_BATTR[R113]->O_ATTR[R106]->S_DT[R114];
end if;

LOG::LogInfo( message:"s_dt.Name is " + s_dt.Name );
select any adatype from instances of adatype where ( selected.name == s_dt.Name );
if ( empty adatype )
  // TODO for now, if a type does not exist, create a new one...
  LOG::LogInfo( message:"DID NOT FIND " + s_dt.Name );
  select any domain_package from instances of domain_package;
  adatype = adatype::populate( name:s_dt.Name, domain_package:domain_package, visibility:"private", adaname:"bogusname" );
end if;
select any empty_member from instances of member where false;
typeref = typeref::populate( name:adatype.name, body:"", domain:0, parent_parameter:0, parent_operation:0, parent_attribute:1, parent_routine:0, parent_member:empty_member );
relate typeref to adatype across R3762;
relate field to typeref across R5;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("7bb720bc-3c33-43ad-b9fd-57c66138c62c",
	"044dfd91-f990-49d8-b9d3-f7cab2bd02a4",
	'o_attr',
	"579b8247-e153-481d-8926-384cdc722464",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("579b8247-e153-481d-8926-384cdc722464",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Attribute>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO S_SPARM
	VALUES ("22ffd5c7-45b8-4778-b91a-438d77b4b73d",
	"044dfd91-f990-49d8-b9d3-f7cab2bd02a4",
	'record',
	"b2691aea-c079-4609-863d-c1ed62e47655",
	0,
	'',
	"7bb720bc-3c33-43ad-b9fd-57c66138c62c",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b2691aea-c079-4609-863d-c1ed62e47655",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<record>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO PE_PE
	VALUES ("044dfd91-f990-49d8-b9d3-f7cab2bd02a4",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a22264fd-dd74-4592-bfa4-31f80351ceb5",
	"00000000-0000-0000-0000-000000000000",
	'transformBuiltinTypes',
	'',
	'select any empty_domain_package from instances of domain_package where false;
select many s_dts from instances of S_DT;
for each s_dt in s_dts
  // Builtin types have no containing package or component.
  select one c_c related by s_dt->PE_PE[R8001]->C_C[R8003];
  select one ep_pkg related by s_dt->PE_PE[R8001]->EP_PKG[R8000];
  if ( empty c_c and empty ep_pkg )
    codegen_type = "Application_Types.Base_Integer_Type";
    if ( "boolean" == s_dt.Name )
      codegen_type = "Application_Types.Base_Boolean_Type";
    elif ( "integer" == s_dt.Name )
      codegen_type = "Application_Types.Base_Integer_Type";
    elif ( "real" == s_dt.Name )
      codegen_type = "Application_Types.Base_Float_Type";
    elif ( "string" == s_dt.Name )
      codegen_type = "Application_Types.Base_String_Type";
    elif ( "unique_id" == s_dt.Name )
      codegen_type = "Application_Types.Base_Integer_Type";
    else
      // TODO finish mapping all built-in types to Ada types
    end if;
    if ( "" != codegen_type )
      LOG::LogInfo( message:"tranforming built-in type with name " + s_dt.Name );
      adatype = adatype::populate( name:s_dt.Name, domain_package:empty_domain_package, visibility:"public", adaname:codegen_type );
    end if;
  end if;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO PE_PE
	VALUES ("a22264fd-dd74-4592-bfa4-31f80351ceb5",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2b5bfab2-31f8-45e9-8d97-ecbcbed73c8e",
	"00000000-0000-0000-0000-000000000000",
	'component2domain_package',
	'',
	'c_c = param.c_c;
root_package = param.root_package;

// create genfile and domain package
domain_package = domain_package::populate( name:c_c.Name, description:c_c.Descrip );
relate domain_package to root_package across R3;

// domain package is in a file
filename = T::sub( format:"lr", s:root_package.name ) + "-" + T::sub( format:"lr", s:c_c.Name );
genfile = genfile::populate( name:filename, extension:"ads" );
relate domain_package to genfile across R200;


// transform types for domain component
::type2adatype( c_c:c_c, domain_package:domain_package );

// transform classes to class packages
select many inner_ep_pkgs related by c_c->PE_PE[R8003]->EP_PKG[R8001];
select many o_objs related by inner_ep_pkgs->PE_PE[R8000]->O_OBJ[R8001];
for each o_obj in o_objs
  ::class2class_package( o_obj:o_obj, domain_package:domain_package );
end for;

// TODO transform functions
// TODO transform scenarios',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("b4d33fcb-db46-43d7-9ddb-d60e1b7baec7",
	"2b5bfab2-31f8-45e9-8d97-ecbcbed73c8e",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("67f93d18-1045-4c6c-b0d5-a692023c471c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Component/Component.xtuml');
INSERT INTO S_SPARM
	VALUES ("b74ed818-f8fa-4081-ae35-63642daa060b",
	"2b5bfab2-31f8-45e9-8d97-ecbcbed73c8e",
	'root_package',
	"da67c6f1-2deb-482b-bee3-f480d0fcbc8c",
	0,
	'',
	"b4d33fcb-db46-43d7-9ddb-d60e1b7baec7",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("da67c6f1-2deb-482b-bee3-f480d0fcbc8c",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<root_package>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO PE_PE
	VALUES ("2b5bfab2-31f8-45e9-8d97-ecbcbed73c8e",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d40007e2-7750-4580-933b-eb2c480c2dc6",
	"00000000-0000-0000-0000-000000000000",
	'class2class_package',
	'',
	'o_obj = param.o_obj;
domain_package = param.domain_package;

// class becomes a genfile containing package with a record
class_package = class_package::populate( name:o_obj.Key_Lett, long_name:o_obj.Name, description:o_obj.Descrip );
relate class_package to domain_package across R4;

// class package is in a file
select one root_package related by domain_package->root_package[R3];
filename = T::sub( format:"lr", s:root_package.name ) + "-" + T::sub( format:"lr", s:domain_package.name ) + "-" + T::sub( format:"lr", s:class_package.name );
genfile = genfile::populate( name:filename, extension:"ads" );
relate class_package to genfile across R200;

create object instance record of record;
record.name = class_package.name;
relate record to class_package across R1;

// attributes become fields
select many o_attrs related by o_obj->O_ATTR[R102];
for each o_attr in o_attrs
  ::attribute2field( o_attr:o_attr, record:record );
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	0);
INSERT INTO S_SPARM
	VALUES ("6f6defcf-633e-431e-b072-35db54bc0f3f",
	"d40007e2-7750-4580-933b-eb2c480c2dc6",
	'o_obj',
	"63f4ff99-f127-443b-a678-30ace41da702",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("63f4ff99-f127-443b-a678-30ace41da702",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Model Class>',
	'',
	'',
	'../../../../mcooa/models/mcooa/ooaofooa/Subsystem/Subsystem.xtuml');
INSERT INTO S_SPARM
	VALUES ("cb425bce-6256-4b94-a761-8c3f72bfccf7",
	"d40007e2-7750-4580-933b-eb2c480c2dc6",
	'domain_package',
	"73535d6a-209c-42ca-8802-bd03f5981206",
	0,
	'',
	"6f6defcf-633e-431e-b072-35db54bc0f3f",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("73535d6a-209c-42ca-8802-bd03f5981206",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<domain_package>',
	'',
	'',
	'../architecture/classes/classes.xtuml');
INSERT INTO PE_PE
	VALUES ("d40007e2-7750-4580-933b-eb2c480c2dc6",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2c22453e-23dc-44c1-9dd1-23ee63d41578",
	"00000000-0000-0000-0000-000000000000",
	'type2adatype',
	'',
	'c_c = param.c_c;
domain_package = param.domain_package;
name = ""; visibility = ""; body = "";

// Data types in packages inside the component are considered private.
select many ep_pkgs related by c_c->PE_PE[R8003]->EP_PKG[R8001];
select many pkg_s_dts related by ep_pkgs->PE_PE[R8000]->S_DT[R8001];
select many pkgref_s_dts related by ep_pkgs->EP_PKGREF[R1402.''refers to'']->EP_PKG[R1402.''refers to'']->PE_PE[R8000]->S_DT[R8001];
private_s_dts = pkg_s_dts + pkgref_s_dts;

// Data types in packages and sub-packages directly off of the system are considered public.
select many public_s_dts from instances of S_DT where ( false );
select many ep_pkgs related by c_c->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405]->EP_PKG[R1401] where ( selected.Name != "types" );
while ( not_empty ep_pkgs )
  select many pkg_s_dts related by ep_pkgs->PE_PE[R8000]->S_DT[R8001];
  public_s_dts = public_s_dts | pkg_s_dts;
  select many ep_pkgs related by ep_pkgs->PE_PE[R8000]->EP_PKG[R8001];
end while;

// Iterate twice to loop through private and public types.
i = 0;
while ( i <= 1 )
  s_dts = private_s_dts;
  if ( 1 == i )
    s_dts = public_s_dts;
  end if;
  for each s_dt in s_dts
    select one s_irdt related by s_dt->S_IRDT[R17];
    // Do not output type definitions for instance reference data types.
    if ( empty s_irdt )
      select one s_udt related by s_dt->S_UDT[R17];
      select one s_edt related by s_dt->S_EDT[R17];
      select one s_sdt related by s_dt->S_SDT[R17];

      name = s_dt.Name;
      visibility = "private";
      if ( 1 == i )
        visibility = "public";
      end if;
      body = "";
      
      if ( not_empty s_udt )
        // see what type the UDT is based on
        select one base_s_dt related by s_udt->S_DT[R18];
      
        // get body of type
        if ( s_udt.Definition != "" )
          // handle case where there is a definition
          body = s_udt.Definition;
        else
          // There is no definition, use the underlying type.  If the underlying type
          // is MASLtype, treat this as a typeref and do not output it.  Otherwise
          // output using the underlying type as the definition.
          if ( (base_s_dt.Name == "MASLtype") or (s_dt.Name == "MASLtype") )
            continue;
          elif ( -1 < STRING::indexof( haystack:s_dt.Name, needle:" of " ) ) // blank-o-f-blank
            continue;
          else
            body = base_s_dt.Name;
          end if;
        end if;
        adatype = adatype::populate( name:name, domain_package:domain_package, visibility:visibility, adaname:body );
        select one s_range related by s_udt->S_RANGE[R57];
        if ( not_empty s_range )
          range_span = range_span::populate( type:adatype, minimum:s_range.Min, maximum:s_range.Max );
        end if;
      elif ( not_empty s_edt )
        adatype = adatype::populate( name:name, domain_package:domain_package, visibility:visibility, adaname:body );
        enumeration = enumeration::populate( adatype:adatype );
        select any s_enum from instances of S_ENUM where (false);
        // get to the first entry
        select any prev_s_enum related by s_edt->S_ENUM[R27];
        while ( not_empty prev_s_enum )
          assign s_enum = prev_s_enum;
          select one prev_s_enum related by s_enum->S_ENUM[R56.''succeeds''];
        end while;
        // now iterate over the enumerators
        while ( not_empty s_enum )
          enumerator = enumerator::populate( name:s_enum.Name, expression:"", enumeration:enumeration );
          select one s_enum related by s_enum->S_ENUM[R56.''precedes''];
        end while;
      elif ( not_empty s_sdt )
        adatype = adatype::populate( name:name, domain_package:domain_package, visibility:visibility, adaname:body );
        structure = structure::populate( adatype:adatype );
        select any s_mbr from instances of S_MBR where (false);
        // get to the first entry
        select any prev_s_mbr related by s_sdt->S_MBR[R44];
        while ( not_empty prev_s_mbr )
          assign s_mbr = prev_s_mbr;
          select one prev_s_mbr related by s_mbr->S_MBR[R46.''succeeds''];
        end while;
        // now iterate over the members
        while ( not_empty s_mbr )
          member = member::populate( name:s_mbr.Name, expression:"", structure:structure );
          select one mbr_s_dt related by s_mbr->S_DT[R45];
          select one ep_pkg related by mbr_s_dt->PE_PE[R8001]->EP_PKG[R8000];
          // TODO ::type2typeref( s_dt:mbr_s_dt, domain_pkg:ep_pkg );
          select one s_mbr related by s_mbr->S_MBR[R46.''precedes''];
        end while;
      else
        continue;
      end if;

      select one ep_pkg related by s_dt->PE_PE[R8001]->EP_PKG[R8000];
      // TODO ::mark2pragma( markable:"User Data Type", pathkey: ::package_get_path( ep_pkg:ep_pkg, child: s_dt.Name ) );

      // TODO ::Descrip2description( Descrip:s_dt.Descrip );
    end if;
  end for;
  i = i + 1;
end while;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0,
	1);
INSERT INTO S_SPARM
	VALUES ("2ba2633d-3809-4696-acba-56e90b03029e",
	"2c22453e-23dc-44c1-9dd1-23ee63d41578",
	'domain_package',
	"73535d6a-209c-42ca-8802-bd03f5981206",
	0,
	'',
	"1059db07-0f55-46d5-a807-0b2348cbd88b",
	'');
INSERT INTO S_SPARM
	VALUES ("1059db07-0f55-46d5-a807-0b2348cbd88b",
	"2c22453e-23dc-44c1-9dd1-23ee63d41578",
	'c_c',
	"67f93d18-1045-4c6c-b0d5-a692023c471c",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("2c22453e-23dc-44c1-9dd1-23ee63d41578",
	1,
	"195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("195e9f6c-7ef4-4e85-8442-a2dcbf6639d2",
	1,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO S_SYS_PROXY
	VALUES ("d791089f-e6d6-4e8a-a040-7ffe70c0731b",
	'mcada',
	1,
	'../mcada.xtuml');
